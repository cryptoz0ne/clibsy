// ESLint v1.9.0
{
  // Set this file as the root ESLint configuration for the project.
  "root": true,

  "env": {
    // browser global variables.
    // "browser": false,

    // Node.js global variables and Node.js scoping.
    "node": true,

    // CommonJS global variables and CommonJS scoping (use this for browser-only code that uses Browserify/WebPack).
    // "commonjs": false,

    // web workers global variables.
    // "worker": false,

    // defines require() and define() as global variables as per the amd spec.
    // "amd": false,

    // adds all of the Mocha testing global variables.
    // "mocha": false,

    // adds all of the Jasmine testing global variables for version 1.3 and 2.0.
    // "jasmine": false,

    // Jest global variables.
    // "jest": false,

    // PhantomJS global variables.
    // "phantomjs": false,

    // Protractor global variables.
    // "protractor": false,

    // QUnit global variables.
    // "qunit": false,

    // jQuery global variables.
    // "jquery": false,

    // Prototype.js global variables.
    // "prototypejs": false,

    // ShellJS global variables.
    // "shelljs": false,

    // Meteor global variables.
    // "meteor": false,

    // MongoDB global variables.
    // "mongo": false,

    // AppleScript global variables.
    // "applescript": false,

    // Java 8 Nashorn global variables.
    // "nashorn": false,

    // Service Worker global variables.
    // "serviceworker": false,

    // Ember test helper globals.
    // "embertest": false,

    // WebExtensions globals.
    // "webextensions": false,

    // enable all ECMAScript 6 features except for modules.
    "es6": true,
  },
  "globals": {
    // (empty object)
  },
  "ecmaFeatures": {
    // arrowFunctions - enable arrow functions
    // binaryLiterals - enable binary literals
    // blockBindings - enable let and const (aka block bindings)
    // classes - enable classes
    // defaultParams - enable default function parameters
    // destructuring - enable destructuring
    // forOf - enable for-of loops
    // generators - enable generators
    // modules - enable modules and global strict mode
    // objectLiteralComputedProperties - enable computed object literal property names
    // objectLiteralDuplicateProperties - enable duplicate object literal properties in strict mode
    // objectLiteralShorthandMethods - enable object literal shorthand methods
    // objectLiteralShorthandProperties - enable object literal shorthand properties
    // octalLiterals - enable octal literals
    // regexUFlag - enable the regular expression u flag
    // regexYFlag - enable the regular expression y flag
    // restParams - enable the rest parameters
    // spread - enable the spread operator for arrays
    // superInFunctions - enable super references inside of functions
    // templateStrings - enable template strings
    // unicodeCodePointEscapes - enable code point escapes
    // globalReturn - allow return statements in the global scope
    // jsx - enable JSX
    // experimentalObjectRestSpread - enable support for the experimental object rest/spread properties (IMPORTANT: This is an experimental feature)
  },
  "rules": {
    // -------------------------------------------------------------------------
    // Possible Errors
    //      The following rules point out areas where you might have made mistakes.
    // -------------------------------------------------------------------------
    // comma-dangle - disallow or enforce trailing commas (recommended)
    // no-cond-assign - disallow assignment in conditional expressions (recommended)
    // no-console - disallow use of console in the node environment (recommended)
    // no-constant-condition - disallow use of constant expressions in conditions (recommended)
    // no-control-regex - disallow control characters in regular expressions (recommended)
    // no-debugger - disallow use of debugger (recommended)
    // no-dupe-args - disallow duplicate arguments in functions (recommended)
    // no-dupe-keys - disallow duplicate keys when creating object literals (recommended)
    // no-duplicate-case - disallow a duplicate case label. (recommended)
    // no-empty-character-class - disallow the use of empty character classes in regular expressions (recommended)
    // no-empty - disallow empty statements (recommended)
    // no-ex-assign - disallow assigning to the exception in a catch block (recommended)
    // no-extra-boolean-cast - disallow double-negation boolean casts in a boolean context (recommended)
    // no-extra-parens - disallow unnecessary parentheses

    // no-extra-semi - disallow unnecessary semicolons (recommended) (fixable)
    "no-extra-semi": 2,

    // no-func-assign - disallow overwriting functions written as function declarations (recommended)
    // no-inner-declarations - disallow function or variable declarations in nested blocks (recommended)
    // no-invalid-regexp - disallow invalid regular expression strings in the RegExp constructor (recommended)
    // no-irregular-whitespace - disallow irregular whitespace outside of strings and comments (recommended)
    // no-negated-in-lhs - disallow negation of the left operand of an in expression (recommended)
    // no-obj-calls - disallow the use of object properties of the global object (Math and JSON) as functions (recommended)
    // no-regex-spaces - disallow multiple spaces in a regular expression literal (recommended)
    // no-sparse-arrays - disallow sparse arrays (recommended)
    // no-unexpected-multiline - Avoid code that looks like two expressions but is actually one
    // no-unreachable - disallow unreachable statements after a return, throw, continue, or break statement (recommended)
    // use-isnan - disallow comparisons with the value NaN (recommended)
    // valid-jsdoc - Ensure JSDoc comments are valid
    // valid-typeof - Ensure that the results of typeof are compared against a valid string (recommended)

    // -------------------------------------------------------------------------
    // Best Practices
    //      These are rules designed to prevent you from making mistakes. They
    //      either prescribe a better way of doing something or help you avoid
    //      footguns.
    // -------------------------------------------------------------------------
    // accessor-pairs - Enforces getter/setter pairs in objects

    // block-scoped-var - treat var statements as if they were block scoped
    "block-scoped-var": 2,

    // complexity - specify the maximum cyclomatic complexity allowed in a program
    // consistent-return - require return statements to either always or never specify values

    // curly - specify curly brace conventions for all control statements
    "curly": 2,

    // default-case - require default case in switch statements
    // dot-location - enforces consistent newlines before or after dots
    // dot-notation - encourages use of dot notation whenever possible

    // eqeqeq - require the use of === and !== (fixable)
    "eqeqeq": [2, "smart"],

    // guard-for-in - make sure for-in loops have an if statement
    // no-alert - disallow the use of alert, confirm, and prompt
    // no-caller - disallow use of arguments.caller or arguments.callee
    // no-case-declarations - disallow lexical declarations in case clauses
    // no-div-regex - disallow division operators explicitly at beginning of regular expression
    // no-else-return - disallow else after a return in an if
    // no-empty-label - disallow use of labels for anything other than loops and switches
    // no-empty-pattern - disallow use of empty destructuring patterns
    // no-eq-null - disallow comparisons to null without a type-checking operator
    // no-eval - disallow use of eval()

    // no-extend-native - disallow adding to native types
    "no-extend-native": 2,

    // no-extra-bind - disallow unnecessary function binding
    // no-fallthrough - disallow fallthrough of case statements (recommended)
    // no-floating-decimal - disallow the use of leading or trailing decimal points in numeric literals
    // no-implicit-coercion - disallow the type conversions with shorter notations
    // no-implied-eval - disallow use of eval()-like methods
    // no-invalid-this - disallow this keywords outside of classes or class-like objects
    // no-iterator - disallow usage of __iterator__ property
    // no-labels - disallow use of labeled statements
    // no-lone-blocks - disallow unnecessary nested blocks
    // no-loop-func - disallow creation of functions within loops
    // no-magic-numbers - disallow the use of magic numbers
    // no-multi-spaces - disallow use of multiple spaces (fixable)
    // no-multi-str - disallow use of multiline strings
    // no-native-reassign - disallow reassignments of native objects
    // no-new-func - disallow use of new operator for Function object
    // no-new-wrappers - disallows creating new instances of String,Number, and Boolean
    // no-new - disallow use of the new operator when not part of an assignment or comparison
    // no-octal-escape - disallow use of octal escape sequences in string literals, such as var foo = "Copyright \251";
    // no-octal - disallow use of octal literals (recommended)
    // no-param-reassign - disallow reassignment of function parameters
    // no-process-env - disallow use of process.env
    // no-proto - disallow usage of __proto__ property
    // no-redeclare - disallow declaring the same variable more than once (recommended)
    // no-return-assign - disallow use of assignment in return statement
    // no-script-url - disallow use of javascript: urls.
    // no-self-compare - disallow comparisons where both sides are exactly the same
    // no-sequences - disallow use of the comma operator
    // no-throw-literal - restrict what can be thrown as an exception
    // no-unused-expressions - disallow usage of expressions in statement position
    // no-useless-call - disallow unnecessary .call() and .apply()
    // no-useless-concat - disallow unnecessary concatenation of literals or template literals
    // no-void - disallow use of the void operator
    // no-warning-comments - disallow usage of configurable warning terms in comments - e.g. TODO or FIXME
    // no-with - disallow use of the with statement
    // radix - require use of the second argument for parseInt()
    // vars-on-top - require declaration of all vars at the top of their containing scope
    // wrap-iife - require immediate function invocation to be wrapped in parentheses
    // yoda - require or disallow Yoda conditions

    // -------------------------------------------------------------------------
    // Strict Mode
    //      These rules relate to using strict mode.
    // -------------------------------------------------------------------------
    // strict - controls location of Use Strict Directives

    // -------------------------------------------------------------------------
    // Variables
    //       These rules have to do with variable declarations.
    // -------------------------------------------------------------------------
    // init-declarations - enforce or disallow variable initializations at definition
    // no-catch-shadow - disallow the catch clause parameter name being the same as a variable in the outer scope
    // no-delete-var - disallow deletion of variables (recommended)
    // no-label-var - disallow labels that share a name with a variable
    // no-shadow-restricted-names - disallow shadowing of names such as arguments
    // no-shadow - disallow declaration of variables already declared in the outer scope
    // no-undef-init - disallow use of undefined when initializing variables
    // no-undef - disallow use of undeclared variables unless mentioned in a /*global */ block (recommended)
    // no-undefined - disallow use of undefined variable

    // no-unused-vars - disallow declaration of variables that are not used in the code (recommended)
    "no-unused-vars": [1, {"vars": "all", "args": "after-used"}],

    // no-use-before-define - disallow use of variables before they are defined
    "no-use-before-define": [2, "nofunc"],

    // -------------------------------------------------------------------------
    // Node.js and CommonJS
    //      These rules are specific to JavaScript running on Node.js or using
    //      CommonJS in the browser.
    // -------------------------------------------------------------------------
    // callback-return - enforce return after a callback
    // global-require - enforce require() on top-level module scope
    // handle-callback-err - enforce error handling in callbacks
    // no-mixed-requires - disallow mixing regular variable and require declarations
    // no-new-require - disallow use of new operator with the require function
    // no-path-concat - disallow string concatenation with __dirname and __filename
    // no-process-exit - disallow process.exit()
    // no-restricted-modules - restrict usage of specified node modules
    // no-sync - disallow use of synchronous methods

    // -------------------------------------------------------------------------
    // Stylistic Issues
    //      These rules are purely matters of style and are quite subjective.
    // -------------------------------------------------------------------------

    // array-bracket-spacing - enforce spacing inside array brackets (fixable)
    "array-bracket-spacing": [2, "never"],

    // block-spacing - disallow or enforce spaces inside of single line blocks (fixable)

    // brace-style - enforce one true brace style
    "brace-style": [2, "stroustrup"],

    // camelcase - require camel case names
    "camelcase": 1,

    // comma-spacing - enforce spacing before and after comma (fixable)
    // comma-style - enforce one true comma style

    // computed-property-spacing - require or disallow padding inside computed properties (fixable)
    "computed-property-spacing": [2, "never"],

    // consistent-this - enforce consistent naming when capturing the current execution context

    // eol-last - enforce newline at the end of file, with no multiple empty lines (fixable)
    "eol-last": 2,

    // func-names - require function expressions to have a name
    // func-style - enforce use of function declarations or expressions
    // id-length - this option enforces minimum and maximum identifier lengths (variable names, property names etc.)
    // id-match - require identifiers to match the provided regular expression
    // indent - specify tab or space width for your code (fixable)
    // jsx-quotes - specify whether double or single quotes should be used in JSX attributes
    // key-spacing - enforce spacing between keys and values in object literal properties
    // linebreak-style - disallow mixed 'LF' and 'CRLF' as linebreaks
    // lines-around-comment - enforce empty lines around comments
    // max-nested-callbacks - specify the maximum depth callbacks can be nested

    // new-cap - require a capital letter for constructors
    "new-cap": 1,

    // new-parens - disallow the omission of parentheses when invoking a constructor with no arguments
    // newline-after-var - require or disallow an empty newline after variable declarations
    // no-array-constructor - disallow use of the Array constructor
    // no-continue - disallow use of the continue statement
    // no-inline-comments - disallow comments inline after code
    // no-lonely-if - disallow if as the only statement in an else block

    // no-mixed-spaces-and-tabs - disallow mixed spaces and tabs for indentation (recommended)
    "no-mixed-spaces-and-tabs": 2,

    // no-multiple-empty-lines - disallow multiple empty lines
    // no-negated-condition - disallow negated conditions
    // no-nested-ternary - disallow nested ternary expressions
    // no-new-object - disallow the use of the Object constructor
    // no-restricted-syntax - disallow use of certain syntax in code
    // no-spaced-func - disallow space between function identifier and application (fixable)
    // no-ternary - disallow the use of ternary operators

    // no-trailing-spaces - disallow trailing whitespace at the end of lines (fixable)
    "no-trailing-spaces": 2,

    // no-underscore-dangle - disallow dangling underscores in identifiers
    // no-unneeded-ternary - disallow the use of ternary operators when a simpler alternative exists

    // object-curly-spacing - require or disallow padding inside curly braces (fixable)
    // "object-curly-spacing": [2, "never"],

    // one-var - require or disallow one variable declaration per function
    // operator-assignment - require assignment operator shorthand where possible or prohibit it entirely
    // operator-linebreak - enforce operators to be placed before or after line breaks
    // padded-blocks - enforce padding within blocks
    // quote-props - require quotes around object literal property names

    // quotes - specify whether backticks, double or single quotes should be used (fixable)
    "quotes": [1, "single", "avoid-escape"],

    // require-jsdoc - Require JSDoc comment

    // semi-spacing - enforce spacing before and after semicolons
    "semi-spacing": [2, {"before": false, "after": false}],

    // semi - require or disallow use of semicolons instead of ASI (fixable)
    "semi": [2, "always"],

    // sort-vars - sort variables within the same declaration block

    // space-after-keywords - require a space after certain keywords (fixable)
    "space-after-keywords": [2, "always"],

    // space-before-blocks - require or disallow a space before blocks (fixable)
    // space-before-function-paren - require or disallow a space before function opening parenthesis (fixable)
    // space-before-keywords - require a space before certain keywords (fixable)
    // space-in-parens - require or disallow spaces inside parentheses
    // space-infix-ops - require spaces around operators (fixable)
    // space-return-throw-case - require a space after return, throw, and case (fixable)

    // space-unary-ops - require or disallow spaces before/after unary operators (fixable)
    "space-unary-ops": 2,

    // spaced-comment - require or disallow a space immediately following the // or /* in a comment
    // wrap-regex - require regex literals to be wrapped in parentheses

    // -------------------------------------------------------------------------
    // ECMAScript 6
    //      These rules are only relevant to ES6 environments.
    // -------------------------------------------------------------------------
    // arrow-body-style - require braces in arrow function body
    // arrow-parens - require parens in arrow function arguments
    // arrow-spacing - require space before/after arrow function's arrow (fixable)
    // constructor-super - verify calls of super() in constructors
    // generator-star-spacing - enforce spacing around the * in generator functions (fixable)
    // no-arrow-condition - disallow arrow functions where a condition is expected
    // no-class-assign - disallow modifying variables of class declarations
    // no-const-assign - disallow modifying variables that are declared using const
    // no-dupe-class-members - disallow duplicate name in class members
    // no-this-before-super - disallow use of this/super before calling super() in constructors.
    // no-var - require let or const instead of var
    // object-shorthand - require method and property shorthand syntax for object literals
    // prefer-arrow-callback - suggest using arrow functions as callbacks
    // prefer-const - suggest using const declaration for variables that are never modified after declared
    // prefer-reflect - suggest using Reflect methods where applicable
    // prefer-spread - suggest using the spread operator instead of .apply().
    // prefer-template - suggest using template literals instead of strings concatenation
    // require-yield - disallow generator functions that do not have yield

    // -------------------------------------------------------------------------
    // Legacy
    //      The following rules are included for compatibility with JSHint and
    //      JSLint. While the names of the rules may not match up with the
    //      JSHint/JSLint counterpart, the functionality is the same.
    // -------------------------------------------------------------------------

    // max-depth - specify the maximum depth that blocks can be nested
    "max-depth": [1, 3],

    // max-len - specify the maximum length of a line in your program
    "max-len": [1, 100],

    // max-params - limits the number of parameters that can be used in the function declaration.

    // max-statements - specify the maximum number of statement allowed in a function
    //                  (try to reduce the max to 15 in the future)
    "max-statements": [1, 20],

    // no-bitwise - disallow use of bitwise operators
    // no-plusplus - disallow use of unary operators, ++ and --
  }
}
